parameters:
    env(RABBITMQ_DSN): 'amqp://%env(RABBITMQ_USER)%:%env(RABBITMQ_PASSWORD)%@%env(RABBITMQ_HOST)%:%env(RABBITMQ_PORT)%/%2f?lazy=0&connection_timeout=40&read_write_timeout=40&heartbeat=5'

framework:
    messenger:
        buses:
            messenger.bus.default:
                middleware:
                    # each time a message is handled, the Doctrine connection
                    # is "pinged" and reconnected if it's closed. Useful
                    # if your workers run for a long time and the database
                    # connection is sometimes lost
                    - doctrine_ping_connection

                    # After handling, the Doctrine connection is closed,
                    # which can free up database connections in a worker,
                    # instead of keeping them open forever
                    - doctrine_close_connection
        serializer:
            default_serializer: messenger.transport.symfony_serializer
            symfony_serializer:
                format: json
                context: { }
        failure_transport: failed
        transports:
            failed: 'doctrine://default?queue_name=failed'
            default:
                dsn: "%env(RABBITMQ_DSN)%"
                retry_strategy:
                    delay: 10000
                options:
                    exchange: { name: 'messenger-topic', type: 'topic', default_publish_routing_key: 'async.command' }
                    queues:
                        default: { binding_keys: ['async.command'] }
            pap:
                dsn: "%env(RABBITMQ_DSN)%"
                retry_strategy:
                    delay: 10000
                options:
                    exchange: { name: 'messenger-topic', type: 'topic', default_publish_routing_key: 'async.pap' }
                    queues:
                        pap: { binding_keys: ['async.pap'] }
            mailchimp_sync:
                dsn: "%env(RABBITMQ_DSN)%"
                retry_strategy:
                    delay: 10000
                options:
                    exchange: { name: 'messenger-topic', type: 'topic', default_publish_routing_key: 'mailchimp.sync' }
                    queues:
                        mailchimp_sync: { binding_keys: ['mailchimp.sync'] }
            mailchimp_campaign:
                dsn: "%env(RABBITMQ_DSN)%"
                retry_strategy:
                    delay: 10000
                options:
                    exchange: { name: 'messenger-topic', type: 'topic', default_publish_routing_key: 'mailchimp.campaign' }
                    queues:
                        mailchimp_campaign: { binding_keys: ['mailchimp.campaign'] }
        routing:
            App\Mailchimp\CampaignMessageInterface: mailchimp_campaign
            App\Mailchimp\SynchronizeMessageInterface: mailchimp_sync
            App\Pap\Command\AsynchronousMessageInterface: pap
            App\Messenger\Message\AsynchronousMessageInterface: default

{% macro address(address, options = {}) %}
App.createAddressSelector(
    '{{ address.country.vars.id }}',
    '{{ address.postalCode.vars.id }}',
    '{{ address.city.vars.id }}',
    '{{ address.cityName.vars.id }}',
    '{{ address.cityName.vars.required }}',
    {% if address.region is defined -%}
        '{{ address.region.vars.id }}'
    {%- else -%}
        null
    {%- endif %},
    {{ options|json_encode|raw }}
);
{% endmacro %}

{% macro autocomplete_address(addressForm, showOnlyAutocomplete = false) %}
    App.createAutocompleteAddress(
        '#{{ addressForm.address.vars.id }}',
        '#{{ addressForm.postalCode.vars.id }}',
        '#{{ addressForm.cityName.vars.id }}',
        {{ addressForm.region is defined ? '#' ~ addressForm.region.vars.id : 'null' }},
        '#{{ addressForm.country.vars.id }}',
        '.address-autocomplete',
        '.address-block',
        '#address-autocomplete-help-message',
        {{ showOnlyAutocomplete ? 'true' : 'false' }}
    );
{% endmacro %}

{% macro skills(idSkillsField, idSkillSearch, urlSearch, disabledSkillsIdsEnter) %}
$(document).ready(function() {
    var skillList = $('{{ idSkillsField|raw }}');
    var removeSkill = function () {
        var btn = $('.skill-remove');

        btn.unbind('click');
        btn.click(function () {
            $(this).parent().parent().parent().remove();
        });
    };

    var addSkill = function (elem) {
        var skill = $(elem).val().trim();
        if (skill.length > 0) {
            var skillCount = 0;
            $('.summary-skill > input[type=hidden]').each(function () {
                skillCount = Math.max(this.id.replace(/[^0-9]/g, ''), skillCount);
            });
            skillCount++;

            var newSkillWidget = skillList.attr('data-prototype');
            newSkillWidget = newSkillWidget.replace(/__name__/g, skillCount);
            $(newSkillWidget).appendTo(skillList);
            var idNewSkill = "#" + $(newSkillWidget).children('div').attr('id');
            $(idNewSkill).find('input').val(skill);
            $(idNewSkill).find('.skill-value').text(' ' + skill);

            $(elem).val('');
            removeSkill();
        }
    };

    var input = $('{{ idSkillSearch|raw }}');

    // Add skill autocomplete
    input.autocomplete({
        source: function(request, response) {
            var term = request.term.trim();
            if (term.length > 0) {
                $.get("{{ urlSearch|raw }}?term=" + term, function(data) { response(data); });
            } else {
                response([]);
            }
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () {
            },
        },
        open: function() {
            $("ul.ui-menu").width($(this).innerWidth());
        }
    });

    // Add skill by pressing Enter
    input.keyup(function (e) {
        if (e.which == 13 || e.keyCode == 13) {
            e.preventDefault();
            addSkill($(this));
        }
    });

    // Prevent submitting form by pressing enter
    var disabledElementsEnter = $('{{ disabledSkillsIdsEnter|e('js') }}');
    disabledElementsEnter.keydown(function (event) {
        if (event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });

    // Add skill by pressing button "Ajouter"
    $('#add_skill').click(function () {
        addSkill($('{{ idSkillSearch|raw }}'));
    });

    removeSkill();
});
{% endmacro %}

{% macro committee(idCommitteesListField, idCommitteeSearchField, urlSearch, disabledCommitteeEnterIds) %}
$(document).ready(function() {
    var committeeList = $('{{ idCommitteesListField|raw }}');
    var removeCommittee = function () {
        var btn = $('.committee-remove, .type-and-select__item--remove');

        btn.unbind('click');
        btn.click(function () {
            $(this).parent().remove();
        });
    };

    var addCommittee = function (item) {
        var committee = item.value,
            label = item.label;

        if (committee.length > 0) {
            var committeeCount = 0;
            $('.summary-committee > input[type=hidden], .type-and-select__item > input[type=hidden]').each(function () {
                committeeCount = Math.max(this.id.replace(/[^0-9]/g, ''), committeeCount);
            });
            committeeCount++;

            var newCommitteeWidget = committeeList.attr('data-prototype'),
                committeeWidgetId = '#'+committeeList.attr('id')+'_'+committeeCount;
            newCommitteeWidget = newCommitteeWidget.replace(/__name__/g, committeeCount);

            $(newCommitteeWidget).appendTo(committeeList);
            $(committeeWidgetId).val(committee);
            $(committeeWidgetId).parent().find('.committee-value, .type-and-select__item--value').text(' ' + label);

            $('{{ idCommitteeSearchField|raw }}').val('');
            removeCommittee();
        }
    };

    var input = $('{{ idCommitteeSearchField|raw }}');

    // Add committee autocomplete
    input.autocomplete({
        source: function(request, response) {
            var term = request.term.trim();
            if (term.length > 0) {
                $.get("{{ urlSearch|raw }}?term=" + term, function(data) {
                    var array = $.map(data, function(m) {
                        return {
                            label: m.name,
                            value: m.uuid
                        };
                    });
                    response(array);
                });
            } else {
                response([]);
            }
        },
        minLength: 1,
        messages: {
            noResults: '',
            results: function () {
            },
        },
        select: function (e, ui) {
            addCommittee(ui.item);

            return false;
        },
        change: function (ev, ui) {
            if (!ui.item) {
                input.val('');
            }

            return false;
        },
        open: function() {
            $("ul.ui-menu").width($(this).innerWidth());
        }
    }).autocomplete('widget').addClass('em-form__autocomplete');

    // Add committee by pressing Enter
    input.keyup(function (e) {
        if (e.which == 13 || e.keyCode == 13) {
            e.preventDefault();
            addCommittee($(this));
        }
    });

    // Prevent submitting form by pressing enter
    var disabledElementsEnter = $('{{ disabledCommitteeEnterIds|e('js') }}');
    disabledElementsEnter.keydown(function (event) {
        if (event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });

    removeCommittee();
});
{% endmacro %}

{% macro chart_acceptation(selector, charterType) %}
$(document).ready(function() {
    var element = $("{{ selector }}");

    element.dialog({
        height: "auto",
        width: "90%",
        modal: true,
        minHeight: 500,
        position: { my: "center", at: "top" },
        buttons: {
            "{{ 'referent.button.accept'|trans }}": function () {
                $.ajax({
                    url: "{{ path('app_user_set_accept_chart')|e('js') }}",
                    type: 'PUT',
                    data: {
                        charterType: '{{ charterType|e('js') }}'
                    }
                });

                element.remove();
            }
        },
        beforeClose: function (event, ui) {
            window.location.replace("{{ path('homepage') }}");
        }
    });
});
{% endmacro %}

{% macro manager_sticky_header(selector) %}
    $(window).scroll(function() {
        var scroll = $(window).scrollTop();
        if (scroll >= 350) {
            $("{{ selector }}").addClass("active");
        } else {
            $("{{ selector }}").removeClass("active");
        }
    });
{% endmacro %}

{% macro init_event_cropperjs(form) %}
    {% import _self as helper %}
    {{ helper.init_cropperjs(form, 16 / 9, 960, 540) }}
{% endmacro %}

{% macro init_candidacy_cropperjs(form) %}
    {% import _self as helper %}
    {{ helper.init_cropperjs(form, 1, 500, 500) }}
{% endmacro %}

{% macro init_cropperjs(form, ratio, width, height) %}
    var cropperInitCallback = function () {
        var inputFile = dom('#{{ form.image.vars.id }}');
        var container = inputFile.parentNode.parentNode;
        var inputCroppedImage = dom('#{{ form.croppedImage.vars.id }}');

        on(inputFile, 'change', function () {
            App.runImageCropper(
                inputFile,
                inputCroppedImage,
                container,
                { ratio: {{ ratio }}, width: {{ width }}, height: {{ height }} }
            );
        });

        on(findOne(container, '.delete-profile-image--trigger'), 'click', function (event) {
            event.preventDefault();

            inputFile.value = '';
            inputCroppedImage.value = -1;

            show(findOne(container, '.image-uploader--label'));
            hide(findOne(container, '.image-uploader--preview'));
        });
    };
    cropperInitCallback();
{% endmacro %}

{% extends 'base_renaissance.html.twig' %}

{% block page_title 'Carte de nos comités locaux' %}

{% block stylesheets %}
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />
    <style>
        #map {
            height: 100vh;
            width: 100%;
        }
    </style>
{% endblock %}

{% block content %}
    <main class="re_new_ui min-h-screen flex flex-col items-center md:justify-center">
        <section class="flex flex-col justify-center items-center w-full">
            <div class=" flex-col w-full">
                <div class="flex flex-col flex-1 justify-center items-center">
                    <div id="map"></div>
                </div>
            </div>
        </section>
    </main>
{% endblock %}

{% block final_javascripts %}
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <script>
        mapboxgl.accessToken = '{{ mapbox_token }}';

        Bootstrap.onLoad(() => {
            const map = new mapboxgl.Map({
                container: 'map',
                style: '{{ mapbox_style }}',
                center: [3, 47],
                zoom: 6,
            });

            const popup = new mapboxgl.Popup({
                closeOnClick: false,
                closeOnMove: false,
                closeButton: false
            });

            let currentCommitteeId = null;

            map.on('load', async () => {
                map.addSource('committees', {
                    type: 'geojson',
                    data: '{{ url('app_committees_perimeters') }}',
                })

                map.addLayer({
                    id: 'committees-layer',
                    type: 'fill',
                    source: 'committees',
                    paint: {
                        "fill-outline-color": 'rgba(0,0,0,0)',
                        'fill-color': ['get', 'color'],
                        'fill-opacity': 0.5,
                    },
                });

                map.addLayer({
                    id: 'committees-layer-highlighted',
                    type: 'fill',
                    source: 'committees',
                    paint: {
                        "fill-outline-color": 'rgba(0,0,0,0)',
                        'fill-color': ['get', 'color'],
                    },
                    filter: ['==', ['get', 'id'], ''],
                });
            });

            map.on('mousemove', 'committees-layer', (e) => {
                const feature = e.features[0];

                if (currentCommitteeId && currentCommitteeId === feature.properties.id) {
                    return;
                }

                currentCommitteeId = feature.properties.id

                map.getCanvas().style.cursor = 'pointer';

                map.setFilter('committees-layer-highlighted', [
                    '==',
                    ['get', 'id'],
                    feature.properties.id
                ]);

                const text = [
                    '<div><strong>Comité : </strong><a href="' +
                    ('{{ path('admin_app_committee_edit', {id: 111}) }}'.replace('111', feature.properties.id)) +
                    '" class="text-ui_blue-50" target="_blank">' + feature.properties.name + '</a></div>',
                '<div><strong>Animateur : </strong>' +
                (feature.properties.animator_first_name
                    ? ('<a href="' + ('{{ path('admin_app_adherent_edit', {id: 111}) }}'.replace('111', feature.properties.animator_id)) +
                    '" class="text-ui_blue-50" target="_blank">' + feature.properties.animator_first_name + ' ' + feature.properties.animator_last_name + '</a>') : '~') + '</div>',
            ].join('');

                popup
                    .setLngLat(getFeatureCenter(feature))
                    .setHTML(text)
                    .addTo(map);
            });

            map.addControl(new mapboxgl.NavigationControl());
        });

        const getFeatureCenter = (feature) => {
            if (feature.geometry.type === 'Point') {
                return feature.geometry.coordinates;
            }

            if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {
                let coordinates = feature.geometry.coordinates;

                if (feature.geometry.type === 'MultiPolygon') {
                    coordinates = coordinates.flat(1);
                }

                let totalX = 0;
                let totalY = 0;
                let totalPoints = 0;

                coordinates[0].forEach(coord => {
                    totalX += coord[0];
                    totalY += coord[1];
                    totalPoints++;
                });

                return [totalX / totalPoints, totalY / totalPoints];
            }

            if (feature.geometry.type === 'LineString' || feature.geometry.type === 'MultiLineString') {
                let coordinates = feature.geometry.coordinates;

                if (feature.geometry.type === 'MultiLineString') {
                    coordinates = coordinates.flat(1);
                }

                const midIndex = Math.floor(coordinates.length / 2);
                return coordinates[midIndex];
            }

            throw new Error(`Unsupported geometry type: ${feature.geometry.type}`);
        };
    </script>
{% endblock %}

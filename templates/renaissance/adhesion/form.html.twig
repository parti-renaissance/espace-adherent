{% extends 'base_renaissance.html.twig' %}

{% block page_title 'Adhésion' %}

{% block content %}
    <main class="bg-[#F4F4F7]">
        <header class="p-10">
            <a href="{{ path('app_renaissance_homepage') }}">
                <img src="{{ asset('/images/renaissance/logo-dark.svg') }}" class="h-4" alt="logo"/>
            </a>
        </header>

        <section class="flex flex-col justify-center items-center gap-8">
            <twig:Atoms:ReCard class="max-w-[540px] !sticky !rounded-t-0">
                <nav>
                    <ol class="breadcrumb">
                        <li>Adresse e-mail</li>
                        <li>Mes information</li>
                        <li>Légalités</li>
                        <li>Montant</li>
                    </ol>
                </nav>
            </twig:Atoms:ReCard>

            <h2 class="text-center font-bold text-2xl mb-10">
                Devenez membre de
                <span class="text-blue-500">Renaissance</span>
            </h2>

            <div
                class="p-6 bg-white bg-opacity-30 rounded-[32px] border border-zinc-200 flex-col justify-start items-start gap-6 inline-flex">

                {% form_theme form 'renaissance/forms/tailwind_form_theme.html.twig' %}

                {{ form_start(form) }}
                <div class="flex gap-6 flex-col">
                    <twig:Atoms:ReCard class="max-w-[500px]" x-data="stepOne" id="step_1">
                        <template x-if="generalNotification">
                            <twig:Atoms:ReParagraphStatus
                                xSyncStatus="generalNotification.status"
                                x-text="generalNotification.message"/>
                        </template>

                        {{ form_row(form.email, {
                            attr: {
                                placeholder: 'Adresse mail',
                                validate:"['required', 'email']",
                                autocomplete: 'email',
                                onCheck:"setFieldValid('email')",
                            }, label: false}) }}

                        {{ form_row(form.consentDataCollect, {
                            attr:{
                                validate: "['required']",
                                onCheck:"setFieldValid('consentDataCollect')",
                            },
                            label: 'Je consent au traitement de mes données personnelles',
                            icon: 'info-blank',
                            iconToolTip:'Lorem ipsum dolor sit amet consectetur. Diam facilisis nulla ut ut diam cursus auctor mauris nunc. Vel sit orci id at mi aliquam tellus bibendum. Non amet lorem massa est. Netus elit mattis fermentum ornare senectus volutpat et. Lorem pellentesque mattis vel hendrerit morbi ultricies enim sollicitudin. Pretium ante duis tempus nulla quis vulputate tellus.Lectus sed curabitur tortor leo faucibus elit commodo ultrices adipiscing. Felis quis convallis praesent odio orci sollicitudin in pulvinar. Sem convallis urna malesuada ante interdum. Ipsum tellus et sapien congue ac leo enim at risus. Ut mattis congue nunc suspendisse quis ante curabitur nibh. Luctus donec morbi commodo lacinia nulla ullamcorper ut vulputate enim.' }) }}

                        <div class=" mb-4 w-full re-field-frame !h-auto cursor-pointer"
                             x-on:click="dom('.frc-button')?.click()">
                            {% include 'renaissance/partials/friendly-captcha.html.twig' %}
                        </div>

                        <twig:Molecules:ReButton
                            color="blue"
                            value="J'adhère"
                            class="w-full"
                            x-bind:class="{disabled: !checkValidity()}"
                            x-on:click="handleOnSubmit($event, $dispatch)"
                            xSyncLoading="loading"
                        />

                        <p class="text-center">
                            Vous préférez adhérer par voie postale ?<br/>
                            Télécharger le formulaire d’adhésion papier !
                        </p>

                        <div class="flex justify-center items-center">
                            <twig:Molecules:ReButton
                                tag="a"
                                href="https://storage.googleapis.com/parti-renaissance.fr/Renaissance-Bulletin-adhesion.pdf"
                                target="_blank"
                                color="not-fill"
                                value="Télécharger"
                                class="!w-auto"
                                icon="download"
                            />
                        </div>
                        <hr/>

                        <twig:Atoms:ReParagraphStatus status="info">
                            Une question relative à l’adhésion ? <br>
                            Écrivez-nous à <a class="text-ui_blue-50" href="mailto:adherents@parti-renaissance.fr">adherents@parti-renaissance.fr</a>
                        </twig:Atoms:ReParagraphStatus>

                    </twig:Atoms:ReCard>

                    <twig:Atoms:ReCard class="max-w-[500px]" id="step_2" x-data="stepTwo">
                        {{ form_row(form.civility, {
                            label: 'Mes informations',
                            attr: { onCheck:"setFieldValid('gender')", validate: "['required']" }
                        }) }}
                        <div class="flex-row flex gap-5">
                            {{ form_row(form.lastName, {
                                label: false,
                                attr: { placeholder: 'Nom', onCheck:"setFieldValid('lastName')", validate: "['required']" }
                            }) }}
                            {{ form_row(form.firstName, {
                                label: false,
                                attr: { placeholder: 'Prénom', onCheck:"setFieldValid('firstName')", validate: "['required']" }
                            }) }}
                        </div>
                        {{ form_row(form.address, {label: false}) }}

                        <twig:Molecules:ReButton
                            color="blue"
                            value="Suivant"
                            class="w-full"
                            x-on:click="handleOnSubmit($event, $dispatch)"
                            x-bind:class="{disabled: !checkValidity()}"/>

                    </twig:Atoms:ReCard>

                    <twig:Atoms:ReCard class="max-w-[500px]" id="step_3">
                        {{ form_row(form.amount) }}
                        {{ form_row(form.save) }}
                    </twig:Atoms:ReCard>
                </div>
                <input type="hidden" id="email-validation-token" value="{{ email_validation_token }}"/>
            </div>
            {{ form_end(form) }}
        </section>
    </main>
{% endblock %}

{% block final_javascripts %}
    <script type="module" src="{{ asset('js/friendlycaptcha.widget-0.9.14.module.min.js') }}" async defer></script>

    <script>
        window.initPlaces = async function () {
            const service = new google.maps.places.AutocompleteService();
            const placesService = new google.maps.places.PlacesService(document.createElement('div'));
            const sessionToken = new google.maps.places.AutocompleteSessionToken();

            window.autocomplete = service;
            window.placesService = placesService;
            window.placeSessionToken = sessionToken;

            window.getPlacesPredictions = (query) => {
                return new Promise((resolve, reject) => {
                    service.getPlacePredictions({
                        input: query,
                        sessionToken: sessionToken,
                        // componentRestrictions: {
                        //     country: 'fr'
                        // },
                        types: ['address']
                    }, (predictions, status) => {
                        if (status !== google.maps.places.PlacesServiceStatus.OK) {
                            return reject(status);
                        }
                        return resolve(predictions);
                    });
                });
            };
        };
    </script>

    <script
        src="https://maps.googleapis.com/maps/api/js?key={{ google_maps_api_key }}&libraries=places&callback=initPlaces"></script>

    <script type="text/javascript" defer>
        /**
         *
         * @param {string} query
         * @returns {Promise<Awaited<*[]>>|Promise<*>}
         */
        window.queryGooglePlaces = (query) => {
            if (!query || !query.trim()) return Promise.resolve([]);
            if (!window.getPlacesPredictions) console.error('initPlaces not loaded yet');
            return window.getPlacesPredictions(query)
                .then((predictions) => {
                    return predictions.map((prediction) => {
                        return {
                            label: prediction.description,
                            value: prediction.place_id,
                        };
                    });
                })
                .catch((error) => {
                    return [];
                });
        };

        document.addEventListener(`autocomplete_change:membership_request_address_autocomplete`, ({ detail }) => {
            window.placesService.getDetails({
                placeId: detail,
                sessionToken: window.placeSessionToken,
            }, (place, status) => {
                fillInAddress(place.address_components);
            });

        });

        function fillInAddress(components) {
            // Get the place details from the autocomplete object.
            let address1 = '';
            let postcode = '';

            const cityInput = document.querySelector('#membership_request_address_cityName');
            const addressInput = document.querySelector('#membership_request_address_address');
            const postcodeInput = document.querySelector('#membership_request_address_postalCode');

            for (const component of components) {
                // @ts-ignore remove once typings fixed
                const componentType = component.types[0];

                switch (componentType) {
                case 'street_number': {
                    address1 = `${component.long_name} ${address1}`;
                    break;
                }

                case 'route': {
                    address1 += component.short_name;
                    break;
                }

                case 'postal_code': {
                    postcode = `${component.long_name}${postcode}`;
                    break;
                }

                case 'postal_code_suffix': {
                    postcode = `${postcode}-${component.long_name}`;
                    break;
                }
                case 'locality':
                    cityInput.value = component.long_name;
                    break;
                case 'administrative_area_level_1': {
                    break;
                }
                case 'country':
                    break;
                }

                addressInput.value = address1;
                postcodeInput.value = postcode;

                const inputs = [addressInput, postcodeInput, cityInput];

                inputs.forEach((input) => {
                    input.dispatchEvent(new Event('change'));
                });

            }
        }

        document.addEventListener('alpine:init', async () => {
            Alpine.data('stepOne', () => ({
                fieldsValid: {
                    email: false,
                    consentDataCollect: false,
                    captcha: false,
                },
                generalNotification: null,
                captchaToken: null,
                loading: false,

                init() {
                    this.$nextTick(() => {
                        friendlyChallenge.autoWidget.opts.doneCallback = (token) => {
                            this.captchaToken = token;
                            this.fieldsValid.captcha = true;
                        };
                    });
                },

                setFieldValid: function (field) {
                    return (value) => {
                        this.fieldsValid[field] = value;
                        return this.fieldsValid;
                    };
                },

                handleNextStep: function () {
                    const step2 = dom('#step_2');
                    step2.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                        inline: 'nearest'
                    });
                },

                _postPersistEmail: async function () {
                    return fetch('/api/persist-email', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            email: document.querySelector('#membership_request_email').value,
                            utm_source: document.querySelector('#membership_request_utmSource').value,
                            utm_campaign: document.querySelector('#membership_request_utmCampaign').value,
                            recaptcha: this.captchaToken
                        }),
                    });
                },

                triggerValidateOnAllField() {
                    document.querySelectorAll('#step_1 input')
                        .forEach(x => x.dispatchEvent(new Event('change')));
                },

                _handleBadRequest: function ($dispatch) {
                    return (data) => data.violations.forEach(x => {
                        console.log(x);
                        if (x.property === 'email') {
                            console.log($dispatch);
                            $dispatch('x-validate:membership_request_email', {
                                status: data.status,
                                message: x.message
                            });
                        }

                        if (x.property === 'recaptcha') {
                            this.generalNotification = {
                                status: data.status,
                                message: x.message
                            };
                        }
                    });
                },

                checkValidity() {
                    return Object.values(this.fieldsValid)
                        .every(x => x);
                },

                handleOnSubmit: async function (e, $dispatch) {
                    e.preventDefault();
                    if (!this.checkValidity()) {
                        this.triggerValidateOnAllField();
                        return;
                    }
                    this.loading = true;
                    this._postPersistEmail()
                        .then((response) => {
                            if (response.ok) {
                                this.handleNextStep();
                            } else {
                                response.json()
                                    .then(this._handleBadRequest($dispatch));
                            }
                        })
                        .finally(() => {
                            this.loading = false;
                        });
                    // .catch((error) => {
                    //     captureException(error, {
                    //         tags: {
                    //             component: 'membership-request',
                    //             step: 'persist-email'
                    //         }
                    //     });
                    // });
                }
            }));

            Alpine.data('stepTwo', () => ({
                fieldsValid: {
                    gender: false,
                    lastName: false,
                    firstName: false,
                    nationality: true,
                    address: false,
                    postalCode: false,
                    cityName: false,
                },
                generalNotification: null,

                setFieldValid: function (field) {
                    return (value) => {
                        this.fieldsValid[field] = value;
                        return this.fieldsValid;
                    };
                },

                triggerValidateOnAllField() {
                    document.querySelectorAll('#step_2 input')
                        .forEach(x => x.dispatchEvent(new Event('change')));
                },

                handleNextStep: function () {
                    const step2 = dom('#step_3');
                    step2.scrollIntoView({
                        behavior: 'smooth',
                        block: 'center',
                        inline: 'nearest'
                    });
                },
                checkValidity() {
                    return Object.values(this.fieldsValid)
                        .every(x => x);
                },

                handleOnSubmit: async function (e, $dispatch) {
                    e.preventDefault();
                    if (!this.checkValidity()) {
                        this.triggerValidateOnAllField();
                        return;
                    }
                    e.preventDefault();
                    this.handleNextStep();
                }
            }));
        });
    </script>
{% endblock %}

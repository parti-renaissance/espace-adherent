{% set attr = attributes.all() %}

<div {{ attributes.only('class') }}
    x-data="xValidateField({
        status: '{{ status is defined ? status : 'default' }}',
        message: '{{ message is defined ? message : '' }}',
        validate: {{ validate is defined ? validate : '[]' }},
        onCheck: {{ onCheck is defined ? onCheck : '()=>{}' }}
    })"
    {% if id is defined %}
    id="{{ id }}_select_widget"
    @x-validate:{{ id }}.window="setData($event.detail)"
    {% endif %}>

    <div class="relative flex-col flex justify-center">
        <script>
            if (!window.options_{{ id }}) {
                window.options_{{ id }} = JSON.parse(`{{ options is defined ? options|json_encode|raw: '[]' }}`);
            }
            window.preferredOptions_{{ id }} = Object.values(JSON.parse(`{{ preferredOptions is defined ? preferredOptions|json_encode|raw: '{}' }}`));
        </script>

        <div x-data="xReSelect({
                id:'{{ id is defined ? id : '' }}',
                options: window.options_{{ id }},
                preferredOptions: window.preferredOptions_{{ id }},
                placeholder: '{{ attr.placeholder is defined ? attr.placeholder : '' }}',
                onQuery: {{ attr.onQuery is defined ? attr.onQuery : 'null' }},
                blocked: {{ blocked ? 'true' : 'false' }},
             })"
             class="re-field-frame overflow-hidden !p-0 !h-auto !justify-between
                       {{ (status is defined ? ' re-field-frame--' ~ status) }}"
             x-bind:class="[toggle ? 'active' : '', status ? `re-field-frame--${status}` : '', ].join(' ')"
             x-on:click.away="handleClickAway"
             x-on:click="toggle = true"
             @x-inject-option:{{ id }}.window="setEndValues($event.detail, true)"
        >
            <div class="relative flex flex-col justify-center">
                <textarea x-ref="input" type="text"
                          x-autogrow
                          rows="1"
                          class="re-field-frame w-full !border-0 min-h-[51px] overflow-hidden !outline-0 !rounded-none resize-none"
                          x-on:keyDown="handleKeyDown($event)"
                          x-model="query"
                          x-on:input.debounce.200ms="handleInput($event);"
                          x-bind:class="{'disabled': isValueSet && blocked, '!pr-24': isValueSet && blocked}"
                          x-on:focus="handleChangeSetValue"
                          x-bind:placeholder="placeholder"
                          {% for key,value in searchBoxProps %}
                            {{ key }}="{{ value }}"
                          {% endfor %}
                ></textarea>
                <div x-show="isValueSet && blocked" x-cloak @click="handleChangeSetValue"
                     class="absolute self-end pr-4 flex w-full h-full cursor-pointer justify-end items-center">
                    <span class="text-ui_blue-50 font-medium">Changer</span>
                </div>
            </div>
            <div x-show="toggle && filteredOptions.length > 0" class="max-h-[200px] overflow-y-scroll">
                <hr>
                <ul>
                    <template x-for="option in filteredOptions">
                        <twig:Atoms:ReInputOption
                                xSyncSelected="selected.value === option.value"
                                x-on:click.stop="setEndValues(option)"
                                x-text="option.label"
                                x-ref="`option-${option.value}`"
                                x-effect="isOptionSelected(option) ? $el.scrollIntoView({block: 'nearest', inline: 'nearest'}) : ''"
                        />
                    </template>
                </ul>
            </div>
            <input {{ attributes.without('class', 'options', 'preferredOptions') }}
                    x-ref="select"
                    id="{{ id is defined ? id : '' }}"
                    x-bind="validateField"
                    hidden="hidden">
        </div>
    </div>

    <twig:Atoms:ReTextStatus
            x-show="status !== 'default' && message"
            value="{{ message is defined ? '' }}"
            type="{{ status }}"
            xSyncStatus="status"
            xSyncValue="message"
            showIcon="true"
    />
</div>
